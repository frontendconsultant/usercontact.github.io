{"version":3,"sources":["components/Tab.js","components/Tabs.js","components/Chevron.js","components/ExpandableList.js","pages/ContactItem/ContactItem.js","AppContainer.js","App.js","serviceWorker.js","index.js"],"names":["Tab","onClick","props","label","this","activeTab","count","className","Component","Tabs","children","useState","setActiveTab","onClickTabItem","tab","map","child","key","Chevron","height","width","xmlns","viewBox","fill","d","ExpandableList","title","setActive","setActiveState","setHeight","setHeightState","setRotate","setRotateState","content","useRef","current","scrollHeight","ref","style","maxHeight","ContactItem","name","email","phone","pic","location","class","alt","src","street","number","city","state","postcode","config","require","AppContainer","error","isLoaded","items","url","userUrl","numberCards","fetch","then","res","json","result","setState","buildObject","results","data","sortedItems","sort","a","b","first","tabs","item","filterItems","alphabet","sortedObject","alphabetObject","filterdObj","filter","charAt","toLowerCase","itemCollection","message","length","coll","index","last","toUpperCase","picture","large","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.e37e374b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport \"./Tabs.css\";\r\n\r\nclass Tab extends Component {\r\n  static propTypes = {\r\n    activeTab: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    onClick: PropTypes.func.isRequired,\r\n  };\r\n\r\n  onClick = () => {\r\n    const { label, onClick } = this.props;\r\n    onClick(label);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      onClick,\r\n      props: {\r\n        activeTab,\r\n        label,\r\n        count\r\n      },\r\n    } = this;\r\n\r\n    let className = 'tab-list-item';\r\n\r\n    if (activeTab === label) {\r\n      className += ' tab-list-active';\r\n    }\r\n\r\n    return (\r\n      <li\r\n        className={className}\r\n        onClick={onClick}>\r\n        {label} ({count})\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tab;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Tab from './Tab';\r\nimport \"./Tabs.css\";\r\n\r\nconst Tabs = ({children}) => {\r\n  const [activeTab, setActiveTab] = useState(children[0].props.label);\r\n  const onClickTabItem = (tab) => setActiveTab(tab);\r\n \r\n  return (\r\n    <div className=\"tabs\">\r\n    <ol className=\"tab-list\">\r\n      {children.map((child) => {\r\n        const { label } = child.props;\r\n        const { count } =  child.props;\r\n        return (\r\n          <Tab\r\n            activeTab={activeTab}\r\n            key={label}\r\n            label={label}\r\n            count = {count}\r\n            onClick={onClickTabItem}\r\n          />\r\n        );\r\n      })}\r\n    </ol>\r\n    <div className=\"tab-content\">\r\n      {children.map((child) => {\r\n        if (child.props.label !== activeTab) return undefined;\r\n        return child.props.children;\r\n      })}\r\n    </div>\r\n  </div>\r\n  );\r\n};\r\nTabs.propTypes = {\r\n  children: PropTypes.instanceOf(Array).isRequired\r\n};\r\nexport default Tabs;","import React from \"react\";\r\n\r\nfunction Chevron(props) {\r\n  return (\r\n    <svg\r\n      className={props.className}\r\n      height={props.height}\r\n      width={props.width}\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 320 512\"\r\n    >\r\n      <path\r\n        fill={props.fill}\r\n        d=\"M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z\"\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default Chevron;\r\n","import React, { useState, useRef } from \"react\";\r\nimport Chevron from \"./Chevron\";\r\n\r\nimport \"./ExpandableList.css\";\r\n\r\nconst ExpandableList = ({ title, children }) => {\r\n  const [setActive, setActiveState] = useState(\"\");\r\n  const [setHeight, setHeightState] = useState(\"0px\");\r\n  const [setRotate, setRotateState] = useState(\"expandableList__icon\");\r\n\r\n  const content = useRef(null);\r\n\r\n  const toggleExpandableList = () => {\r\n    setActiveState(setActive === \"\" ? \"active\" : \"\");\r\n    setHeightState(setActive === \"active\" ? \"0px\" : `${content.current.scrollHeight}px`);\r\n    setRotateState(\r\n      setActive === \"active\"\r\n        ? \"expandableList__icon\"\r\n        : \"expandableList__icon rotate\"\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"expandableList__section\">\r\n      <button\r\n        className={`expandableList ${setActive}`}\r\n        onClick={toggleExpandableList}\r\n      >\r\n        <p className=\"expandableList__title\">{title}</p>\r\n        <Chevron className={`${setRotate}`} width={10} fill={\"#777\"} />\r\n      </button>\r\n      <div\r\n        ref={content}\r\n        style={{ maxHeight: `${setHeight}` }}\r\n        className=\"expandableList__content\"\r\n      >\r\n        <div className=\"expandableList__text\">{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpandableList;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./ContactItem.css\";\r\n\r\nconst ContactItem = ({ name, email, phone, pic, location }) => (\r\n  <div class=\"card\">\r\n  <div class=\"row\">\r\n    <div class=\"avatar-container\">\r\n      <div class=\"photo\">\r\n        <img alt=\"avatarImg\" class=\"img\" src={pic} />\r\n      </div>\r\n    </div>\r\n    <div class=\"details-container\">\r\n      <div class=\"content\">\r\n        <h2>{name}</h2>\r\n        <p>e-mail: {email}</p>\r\n        <p>phone: {phone}</p>\r\n        <p>street: {`${location.street.number}, ${location.street.name}`}</p>\r\n        <p>city: {location.city}</p>\r\n        <p>state: {location.state}</p>\r\n        <p>postcode: {location.postcode}</p>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n);\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n  phone: PropTypes.string\r\n};\r\n\r\nexport default ContactItem;\r\n","import React, { Component } from 'react';\r\nimport Tabs from './components/Tabs';\r\nimport ExpandableList from './components/ExpandableList';\r\nimport ContactItem from './pages/ContactItem/ContactItem'\r\n\r\nconst config = require(\"./config.json\");\r\n\r\nclass AppContainer extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        error: null,\r\n        isLoaded: false,\r\n        items: []\r\n      };\r\n    }\r\n  \r\n    componentDidMount() {\r\n      const url = config.userUrl + '?results=' + config.numberCards + '&nat=US';\r\n      fetch(url)\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              items: this.buildObject(result.results)\r\n            });\r\n          },\r\n          // Note: it's important to handle errors here\r\n          // instead of a catch() block so that we don't swallow\r\n          // exceptions from actual bugs in components.\r\n          (error) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              items:  this.buildObject(config.data)\r\n            });\r\n          }\r\n        )\r\n    }\r\n\r\n    buildObject(result) {\r\n      const sortedItems = result.sort((a, b) => (a.name.first > b.name.first ? 1 : -1));\r\n      const filteredMappedItems = config.tabs.map(item => {\r\n        item = this.filterItems(item, sortedItems);\r\n        return item;\r\n      });\r\n\r\n      return filteredMappedItems;\r\n    }\r\n\r\n    filterItems(alphabet, sortedObject) {\r\n      let alphabetObject = {};\r\n      let filterdObj = sortedObject.filter(item =>  (item.name.first).charAt(0).toLowerCase() === alphabet);\r\n      alphabetObject.alphabet = alphabet;\r\n      alphabetObject.itemCollection = filterdObj;\r\n      return alphabetObject;\r\n    }\r\n    \r\n    render() {\r\n      const { error, isLoaded, items } = this.state;\r\n    \r\n      if (error) {\r\n        return <div>Error: {error.message}</div>;\r\n      } else if (!isLoaded) {\r\n        return <div> \r\n               <img alt=\"loading\" src=\"loading.gif\" />\r\n          </div>;\r\n      } else {\r\n        return (\r\n          <Tabs>\r\n            {items.map(item => (\r\n              <div label={item.alphabet} count={item.itemCollection.length}>\r\n                 {\r\n                   item.itemCollection.map( (coll, index) => (\r\n                    <ExpandableList title={`${coll.name.last}, ${(coll.name.first).toUpperCase()}`}>\r\n                    <ContactItem\r\n                      key={index}\r\n                      name={`${(coll.name.first).toUpperCase()}, ${coll.name.last}`}\r\n                      email={coll.email}\r\n                      phone={coll.phone}\r\n                      pic={coll.picture.large}\r\n                      location={coll.location}\r\n                    />\r\n                  </ExpandableList>\r\n                   ))\r\n                 }\r\n              </div>\r\n            ))}\r\n          </Tabs>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  export default AppContainer;","import React from 'react';\r\nimport AppContainer from './AppContainer';\r\nrequire('./index.css');\r\n\r\nconst App = () => <AppContainer />;\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}